        -:    0:Source:Graph.h
        -:    0:Programs:1
        -:    1:// ----------------------
        -:    2:// projects/graph/Graph.h
        -:    3:// Copyright (C) 2014
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------
        -:    6:
        -:    7:#ifndef Graph_h
        -:    8:#define Graph_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <cassert> // assert
        -:   15:#include <cstddef> // size_t
        -:   16:#include <utility> // make_pair, pair
        -:   17:#include <algorithm>
        -:   18:#include <vector>  // vector
        -:   19:
        -:   20:// -----
        -:   21:// Graph
        -:   22:// -----
        -:   23:
function _ZN5GraphD2Ev called 33 returned 100% blocks executed 100%
       33:   24:class Graph {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   25:    public:
        -:   26:        // --------
        -:   27:        // typedefs
        -:   28:        // --------
        -:   29:
        -:   30:        typedef int vertex_descriptor;  // fix!
        -:   31:        typedef std::pair<vertex_descriptor, vertex_descriptor> edge_descriptor;    // fix!
        -:   32:
        -:   33:        typedef std::vector<vertex_descriptor>::const_iterator vertex_iterator;    // fix!
        -:   34:        typedef std::vector<edge_descriptor>::iterator edge_iterator;      // fix!
        -:   35:        typedef std::vector<vertex_descriptor>::const_iterator adjacency_iterator; // fix!
        -:   36:
        -:   37:        typedef std::size_t vertices_size_type;
        -:   38:        typedef std::size_t edges_size_type;
        -:   39:
        -:   40:    public:
        -:   41:        // --------
        -:   42:        // add_edge
        -:   43:        // --------
        -:   44:
        -:   45:        /**
        -:   46:         * @param vertex_descriptor v1 by value
        -:   47:         * @param vertex_descriptor v2 by value
        -:   48:         * @param Graph g by reference
        -:   49:         * return new pair with an edge descriptor and bool
        -:   50:         */
function _Z8add_edgeiiR5Graph called 38 returned 100% blocks executed 88%
       38:   51:        friend std::pair<edge_descriptor, bool> add_edge (vertex_descriptor v1, vertex_descriptor v2, Graph& g) {
       38:   52:            edge_descriptor ed = std::make_pair(v1, v2);
call    0 returned 100%
       38:   53:            bool            b  = false;
        -:   54:
       38:   55:	        std::vector<edge_descriptor>::iterator it = std::find(g._edge.begin(), g._edge.end(), ed);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
       38:   56:	        b = (it == g._edge.end());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       38:   57:	        if(b){
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
       32:   58:	            g._edge.push_back(ed);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       32:   59:		        g._g[ed.first].push_back(ed.second);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       32:   60:		        std::sort(g._edge.begin(), g._edge.end());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
       32:   61:		        std::sort(g._g[ed.first].begin(), g._g[ed.first].end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
        -:   62:	        }
       38:   63:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       38:   64:            return std::make_pair(ed, b);}
call    0 returned 100%
        -:   65:
        -:   66:        // ----------
        -:   67:        // add_vertex
        -:   68:        // ----------
        -:   69:
        -:   70:        /**
        -:   71:         * @param Graph g by reference
        -:   72:         * return vertex descriptor oh the old vertex size.
        -:   73:         */
function _Z10add_vertexR5Graph called 83 returned 100% blocks executed 69%
       83:   74:        friend vertex_descriptor add_vertex (Graph& g) {
       83:   75:            vertex_descriptor v = g._vertex.size();
call    0 returned 100%
       83:   76:	        g._vertex.push_back(v);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       83:   77:	        g._g.push_back(std::vector<vertex_descriptor>());
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
       83:   78:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       83:   79:            return v;}
        -:   80:
        -:   81:        // -----------------
        -:   82:        // adjacent_vertices
        -:   83:        // -----------------
        -:   84:
        -:   85:        /**
        -:   86:         * @param vertex_descriptor v by value
        -:   87:         * @param Graph g by const reference
        -:   88:         * return a new pair of adjacency iterators that are the beginning and end of adjacent vertices
        -:   89:         */
function _Z17adjacent_verticesiRK5Graph called 3 returned 100% blocks executed 90%
        3:   90:        friend std::pair<adjacency_iterator, adjacency_iterator> adjacent_vertices (vertex_descriptor v, const Graph& g) {
        3:   91:            adjacency_iterator b = g._g[v].begin();
call    0 returned 100%
call    1 returned 100%
        3:   92:            adjacency_iterator e = g._g[v].end();
call    0 returned 100%
call    1 returned 100%
        3:   93:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:   94:            return std::make_pair(b, e);}
call    0 returned 100%
        -:   95:
        -:   96:        // ----
        -:   97:        // edge
        -:   98:        // ----
        -:   99:
        -:  100:        /**
        -:  101:         * @param vertex_descriptor v1 by value
        -:  102:         * @param vertex_descriptor v2 by value
        -:  103:         * @param Graph g const reference
        -:  104:         * return pair of edge descriptor and bool. Bool is false is edge doesn't exist
        -:  105:         */
function _Z4edgeiiR5Graph called 16 returned 100% blocks executed 73%
       16:  106:        friend std::pair<edge_descriptor, bool> edge (vertex_descriptor v1, vertex_descriptor v2, Graph& g) {
       16:  107:            edge_descriptor ed = std::make_pair(v1, v2);
call    0 returned 100%
       16:  108:	        bool b = std::find(g._edge.begin(), g._edge.end(), ed) != g._edge.end();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
       16:  109:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       16:  110:            return std::make_pair(ed, b);}
call    0 returned 100%
        -:  111:
        -:  112:        // -----
        -:  113:        // edges
        -:  114:        // -----
        -:  115:
        -:  116:        /**
        -:  117:         * @param Graph g by const reference
        -:  118:         * return pair of edges to show the begining and end of all edges
        -:  119:         */
function _Z5edgesR5Graph called 3 returned 100% blocks executed 88%
        3:  120:        friend std::pair<edge_iterator, edge_iterator> edges (Graph& g) {
        3:  121:            edge_iterator b = g._edge.begin();
call    0 returned 100%
        3:  122:            edge_iterator e = g._edge.end();
call    0 returned 100%
        3:  123:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  124:            return std::make_pair(b, e);}
call    0 returned 100%
        -:  125:
        -:  126:        // ---------
        -:  127:        // num_edges
        -:  128:        // ---------
        -:  129:
        -:  130:        /**
        -:  131:         * @param Graph g by const reference
        -:  132:         * return size of _edge
        -:  133:         */
function _Z9num_edgesRK5Graph called 3 returned 100% blocks executed 83%
        3:  134:        friend edges_size_type num_edges (const Graph& g) {
        3:  135:            edges_size_type s = g._edge.size();
call    0 returned 100%
        3:  136:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  137:            return s;}
        -:  138:
        -:  139:        // ------------
        -:  140:        // num_vertices
        -:  141:        // ------------
        -:  142:
        -:  143:        /**
        -:  144:         * @param Graph g by const reference
        -:  145:         * return the size of _vertex
        -:  146:         */
function _Z12num_verticesRK5Graph called 3 returned 100% blocks executed 83%
        3:  147:        friend vertices_size_type num_vertices (const Graph& g) {
        3:  148:            vertices_size_type s = g._vertex.size();
call    0 returned 100%
        3:  149:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  150:            return s;}
        -:  151:
        -:  152:        // ------
        -:  153:        // source
        -:  154:        // ------
        -:  155:
        -:  156:        /**
        -:  157:         * @param edge_descriptor ed by value
        -:  158:         * @param Graph g by const reference
        -:  159:         * return vertex descriptor that is the desired edge
        -:  160:         */
function _Z6sourceSt4pairIiiERK5Graph called 4 returned 100% blocks executed 80%
        4:  161:        friend vertex_descriptor source (edge_descriptor ed, const Graph& g) {
        4:  162:            vertex_descriptor v = ed.first;
        4:  163:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        4:  164:            return v;}
        -:  165:
        -:  166:        // ------
        -:  167:        // target
        -:  168:        // ------
        -:  169:
        -:  170:        /**
        -:  171:         * @param edge_descriptor ed by value
        -:  172:         * @param Graph g by const reference
        -:  173:         * return vertex descriptor that sees if edge exists or not 
        -:  174:         */
function _Z6targetSt4pairIiiERK5Graph called 4 returned 100% blocks executed 80%
        4:  175:        friend vertex_descriptor target (edge_descriptor ed, const Graph& g) {
        4:  176:            vertex_descriptor v = ed.second;
        4:  177:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        4:  178:            return v;}
        -:  179:
        -:  180:        // ------
        -:  181:        // vertex
        -:  182:        // ------
        -:  183:
        -:  184:        /**
        -:  185:         * @param vertices_size_type v by value
        -:  186:         * @param Graph g by const reference
        -:  187:         * return vertex descriptor that is the desired vertex value
        -:  188:         */
function _Z6vertexmRK5Graph called 6 returned 100% blocks executed 89%
        6:  189:        friend vertex_descriptor vertex (vertices_size_type v, const Graph& g) {
        6:  190:	        if(g._g.size() == 0){
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        1:  191:		      return 0;
        -:  192:	        }
        5:  193:            vertex_descriptor vd = g._vertex[v];
call    0 returned 100%
        5:  194:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        5:  195:            return vd;}
        -:  196:
        -:  197:        // --------
        -:  198:        // vertices
        -:  199:        // --------
        -:  200:
        -:  201:        /**
        -:  202:         * @param Graph g by const reference
        -:  203:         * return pair of vertex iterators that are the beginning and end of the set of vertex 
        -:  204:         */
function _Z8verticesRK5Graph called 3 returned 100% blocks executed 88%
        3:  205:        friend std::pair<vertex_iterator, vertex_iterator> vertices (const Graph& g) {
        3:  206:            vertex_iterator b = g._vertex.begin();
call    0 returned 100%
        3:  207:            vertex_iterator e = g._vertex.end();
call    0 returned 100%
        3:  208:            assert(g.valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  209:            return std::make_pair(b, e);}
call    0 returned 100%
        -:  210:
        -:  211:    private:
        -:  212:        // ----
        -:  213:        // data
        -:  214:        // ----
        -:  215:
        -:  216:        std::vector< std::vector<vertex_descriptor> > _g;
        -:  217:	    std::vector<vertex_descriptor> _vertex;
        -:  218:	    std::vector<edge_descriptor> _edge;
        -:  219:
        -:  220:        // -----
        -:  221:        // valid
        -:  222:        // -----
        -:  223:
        -:  224:        /**
        -:  225:         * checks if graph and vertex size are the same
        -:  226:         */
function _ZNK5Graph5validEv called 198 returned 100% blocks executed 83%
      198:  227:        bool valid () const {
      198:  228:            if(_g.size() != _vertex.size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  229:                return false;
      198:  230:            return true;}
        -:  231:
        -:  232:    public:
        -:  233:        // ------------
        -:  234:        // constructors
        -:  235:        // ------------
        -:  236:
        -:  237:        /**
        -:  238:         * @param vector of vectors of type vector_descriptor g by value
        -:  239:         * @param vector of type vector_descriptor edge by value
        -:  240:         * @param vector of type vector_descriptor vertex by value
        -:  241:         * parameters are assigned to their respective data members 
        -:  242:         */
function _ZN5GraphC2ESt6vectorIS0_IiSaIiEESaIS2_EES2_S0_ISt4pairIiiESaIS6_EE called 33 returned 100% blocks executed 55%
       33:  243:        Graph (std::vector<std::vector<vertex_descriptor>> g = std::vector<std::vector<vertex_descriptor>>(), std::vector<vertex_descriptor> vertex = std::vector<vertex_descriptor>(), std::vector<edge_descriptor> edge = std::vector<edge_descriptor>()) : _g(g), _vertex(vertex),_edge(edge){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
       33:  244:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  245:
        -:  246:        // Default copy, destructor, and copy assignment
        -:  247:        // Graph  (const Graph<T>&);
        -:  248:        // ~Graph ();
        -:  249:        // Graph& operator = (const Graph&);
        -:  250:    };
        -:  251:
        -:  252:#endif // Graph_h
