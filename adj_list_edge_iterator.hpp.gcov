        -:    0:Source:/usr/include/boost/graph/detail/adj_list_edge_iterator.hpp
        -:    0:Programs:1
        -:    1://
        -:    2://=======================================================================
        -:    3:// Copyright 1997, 1998, 1999, 2000 University of Notre Dame.
        -:    4:// Authors: Andrew Lumsdaine, Lie-Quan Lee, Jeremy G. Siek
        -:    5://
        -:    6:// Distributed under the Boost Software License, Version 1.0. (See
        -:    7:// accompanying file LICENSE_1_0.txt or copy at
        -:    8:// http://www.boost.org/LICENSE_1_0.txt)
        -:    9://=======================================================================
        -:   10://
        -:   11:#ifndef BOOST_GRAPH_DETAIL_ADJ_LIST_EDGE_ITERATOR_HPP
        -:   12:#define BOOST_GRAPH_DETAIL_ADJ_LIST_EDGE_ITERATOR_HPP
        -:   13:
        -:   14:#include <iterator>
        -:   15:#include <utility>
        -:   16:#include <boost/detail/workaround.hpp>
        -:   17:
        -:   18:#if BOOST_WORKAROUND( __IBMCPP__, <= 600 )
        -:   19:#  define BOOST_GRAPH_NO_OPTIONAL
        -:   20:#endif
        -:   21:
        -:   22:#ifdef BOOST_GRAPH_NO_OPTIONAL
        -:   23:#  define BOOST_GRAPH_MEMBER .
        -:   24:#else 
        -:   25:#  define BOOST_GRAPH_MEMBER ->
        -:   26:#  include <boost/optional.hpp>
        -:   27:#endif // ndef BOOST_GRAPH_NO_OPTIONAL
        -:   28:
        -:   29:namespace boost {
        -:   30:
        -:   31:  namespace detail {
        -:   32:
        -:   33:    template <class VertexIterator, class OutEdgeIterator, class Graph>
function _ZN5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEED2Ev called 18 returned 100% blocks executed 100%
       18:   34:    class adj_list_edge_iterator {
call    0 returned 100%
        -:   35:      typedef adj_list_edge_iterator self;
        -:   36:    public:
        -:   37:      typedef std::forward_iterator_tag iterator_category;
        -:   38:      typedef typename OutEdgeIterator::value_type value_type;
        -:   39:      typedef typename OutEdgeIterator::reference  reference;
        -:   40:      typedef typename OutEdgeIterator::pointer    pointer;
        -:   41:      typedef typename OutEdgeIterator::difference_type difference_type;
        -:   42:      typedef difference_type distance_type;
        -:   43:
        -:   44:      inline adj_list_edge_iterator() {}
        -:   45:
function _ZN5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEEC2ERKSL_ called 12 returned 100% blocks executed 100%
       12:   46:      inline adj_list_edge_iterator(const self& x) 
        -:   47:      : vBegin(x.vBegin), vCurr(x.vCurr), vEnd(x.vEnd),
       12:   48:        edges(x.edges), m_g(x.m_g) { }
call    0 returned 100%
        -:   49:
        -:   50:      template <class G>
function _ZN5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEEC2ISK_EES4_S4_S4_RKT_ called 6 returned 100% blocks executed 87%
        6:   51:      inline adj_list_edge_iterator(VertexIterator b, 
        -:   52:                                    VertexIterator c,
        -:   53:                                    VertexIterator e,
        -:   54:                                    const G& g) 
        6:   55:        : vBegin(b), vCurr(c), vEnd(e), m_g(&g) {
call    0 returned 100%
call    1 never executed
call    2 never executed
        6:   56:        if ( vCurr != vEnd ) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        8:   57:          while ( vCurr != vEnd && out_degree(*vCurr, *m_g) == 0 )
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 50% (fallthrough)
branch 12 taken 50%
branch 13 taken 40%
branch 14 taken 60% (fallthrough)
        2:   58:            ++vCurr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        3:   59:          if ( vCurr != vEnd )
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
        2:   60:            edges = out_edges(*vCurr, *m_g);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
        -:   61:        }
        6:   62:      }
        -:   63:
        -:   64:      /*Note:
        -:   65:        In the directed graph cases, it is fine. 
        -:   66:        For undirected graphs, one edge go through twice.
        -:   67:      */
function _ZN5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEEppEv called 3 returned 100% blocks executed 81%
        3:   68:      inline self& operator++() {
        3:   69:        ++edges BOOST_GRAPH_MEMBER first;
call    0 returned 100%
call    1 returned 100%
        3:   70:        if (edges BOOST_GRAPH_MEMBER first == edges BOOST_GRAPH_MEMBER second) 
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
        -:   71:        {
        2:   72:          ++vCurr;
call    0 returned 100%
        7:   73:          while ( vCurr != vEnd && out_degree(*vCurr, *m_g) == 0 )
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 60%
branch  8 taken 40% (fallthrough)
        3:   74:            ++vCurr;
call    0 returned 100%
        2:   75:          if ( vCurr != vEnd )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   76:            edges = out_edges(*vCurr, *m_g);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   77:        }
        3:   78:        return *this;
        -:   79:      }
        -:   80:      inline self operator++(int) {
        -:   81:        self tmp = *this;
        -:   82:        ++(*this);
        -:   83:        return tmp;
        -:   84:      }
function _ZNK5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEEdeEv called 3 returned 100% blocks executed 100%
        3:   85:      inline value_type operator*() const 
        3:   86:      { return *edges BOOST_GRAPH_MEMBER first; } 
call    0 returned 100%
call    1 returned 100%
function _ZNK5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEEeqERKSL_ called 3 returned 100% blocks executed 58%
        3:   87:      inline bool operator==(const self& x) const {
        -:   88:        return vCurr == x.vCurr 
        -:   89:          && (vCurr == vEnd 
        3:   90:              || edges BOOST_GRAPH_MEMBER first == x.edges BOOST_GRAPH_MEMBER first);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:   91:      }
function _ZNK5boost6detail22adj_list_edge_iteratorINS_12range_detail16integer_iteratorImEENS0_13out_edge_iterISt23_Rb_tree_const_iteratorINS0_4sep_ImNS_11no_propertyEEEEmNS0_14edge_desc_implINS_12directed_tagEmEElEENS_14adjacency_listINS_4setSENS_4vecSENS_9directedSES8_S8_S8_NS_5listSEEEEneERKSL_ called 3 returned 100% blocks executed 42%
        3:   92:      inline bool operator!=(const self& x) const {
        -:   93:        return vCurr != x.vCurr 
        -:   94:          || (vCurr != vEnd 
        3:   95:              && edges BOOST_GRAPH_MEMBER first != x.edges BOOST_GRAPH_MEMBER first);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:   96:      }
        -:   97:    protected:
        -:   98:      VertexIterator vBegin;
        -:   99:      VertexIterator vCurr;
        -:  100:      VertexIterator vEnd;
        -:  101:
        -:  102:#ifdef BOOST_GRAPH_NO_OPTIONAL
        -:  103:      std::pair<OutEdgeIterator, OutEdgeIterator> edges;
        -:  104:#else
        -:  105:      boost::optional<std::pair<OutEdgeIterator, OutEdgeIterator> >
        -:  106:        edges;
        -:  107:#endif // ndef BOOST_GRAPH_NO_OPTIONAL
        -:  108:      const Graph* m_g;
        -:  109:    };
        -:  110:
        -:  111:  } // namespace detail
        -:  112:
        -:  113:}
        -:  114:
        -:  115:#undef BOOST_GRAPH_MEMBER
        -:  116:
        -:  117:#endif // BOOST_GRAPH_DETAIL_ADJ_LIST_EDGE_ITERATOR_HPP
